generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type PageHero {
  content String
  title   String
}

type PageMetadata {
  keywords  String
  pageItems PageMetadataPageItems[]
}

type PageMetadataPageItems {
  auth  Boolean?
  icon  String[]
  order Int
  slug  String
  title String
}

type ProjectSpecs {
  Achievements       String[]
  Technical_Approach Json     @map("Technical Approach")
  User_Benefits      Json     @map("User Benefits")
}

type ProjectUrl {
  demo   String
  github String
}

type Picture {
  src String
  alt String
}

type TimelineExtra {
  gpa    String?
  main   String[]
  major  String?
  minor  String?
  skills String[]
  thesis String?
}

model Page {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @db.Date
  desc      String
  excerpt   String
  hero      PageHero?
  label     String       @unique
  metadata  PageMetadata
  title     String
  updatedAt DateTime     @db.Date
  projects  Project[]
  sections  Section[]
}

model Project {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now()) @db.Date
  desc      String
  excerpt   String
  page      Page         @relation(fields: [pageId], references: [id])
  pageId    String       @db.ObjectId
  specs     ProjectSpecs
  tags      String[]
  title     String
  url       ProjectUrl?
  pics      Picture[]
}

model Section {
  id       String             @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  order    Int                @default(1)
  page     Page               @relation(fields: [pageId], references: [id])
  pageId   String             @db.ObjectId
  subtitle String
  tag      String
  skills   Skill[]
  timeline Timeline[]
  others   OtherAchievement[]
}

model Skill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     String
  section   Section  @relation(fields: [sectionId], references: [id])
  sectionId String   @db.ObjectId
  svg       String
  title     String
  top       Boolean?
}

model Timeline {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  end       DateTime?      @db.Date
  extra     TimelineExtra?
  location  String
  main      String
  section   Section        @relation(fields: [sectionId], references: [id])
  sectionId String         @db.ObjectId
  start     DateTime       @db.Date
  sub       String
}

model OtherAchievement {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  type      OtherTypes
  title     String
  date      DateTime   @db.Date
  validity  DateTime?  @db.Date
  desc      String
  excerpt   String?
  note      String?
  section   Section    @relation(fields: [sectionId], references: [id])
  sectionId String     @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  username String    @unique
  password String
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OtherTypes {
  Award
  Certification
  Competition
  Conference
  Course
  Hackathon
  Other
  Publication
  Scholarship
  Volunteer
}
